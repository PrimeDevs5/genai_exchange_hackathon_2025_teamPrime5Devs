/**
 * PDF.js Worker Configuration Helper
 * Handles multiple fallback strategies for PDF.js worker loading
 */

let isWorkerConfigured = false;

// Multiple CDN sources for PDF.js worker
const WORKER_SOURCES = [
  // jsDelivr CDN
  'https://cdn.jsdelivr.net/npm/pdfjs-dist@4.7.76/build/pdf.worker.min.js',
  // unpkg CDN
  'https://unpkg.com/pdfjs-dist@4.7.76/build/pdf.worker.min.js',
  // cdnjs
  'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/4.0.269/pdf.worker.min.js',
  // Local fallback (we'll try to serve it from public folder)
  '/pdf.worker.min.js'
];

// Test if a URL is accessible
async function testWorkerUrl(url) {
  try {
    const response = await fetch(url, { 
      method: 'HEAD',
      mode: 'no-cors' // Allow CORS issues but still test accessibility
    });
    return true;
  } catch (error) {
    console.warn('‚ùå Worker URL test failed:', url, error.message);
    return false;
  }
}

// Configure PDF.js worker with fallbacks
export async function configurePDFWorker() {
  if (isWorkerConfigured) {
    console.log('‚úÖ PDF.js worker already configured');
    return;
  }

  // Import PDF.js
  const pdfjsLib = await import('pdfjs-dist');
  
  console.log('üîß Configuring PDF.js worker...');
  
  // Try each worker source until one works
  for (let i = 0; i < WORKER_SOURCES.length; i++) {
    const workerSrc = WORKER_SOURCES[i];
    console.log(`üîÑ Trying worker source ${i + 1}/${WORKER_SOURCES.length}:`, workerSrc);
    
    try {
      // Set the worker source
      pdfjsLib.GlobalWorkerOptions.workerSrc = workerSrc;
      
      // Test the worker by creating a simple loading task
      const testDocument = new Uint8Array([
        0x25, 0x50, 0x44, 0x46, 0x2d, 0x31, 0x2e, 0x34, 0x0a, 0x25, 0xc4, 0xe5, 0xf2, 0xe5, 0xeb, 0xa7,
        0xf3, 0xa0, 0xd0, 0xc4, 0xc6, 0x0a, 0x31, 0x20, 0x30, 0x20, 0x6f, 0x62, 0x6a, 0x0a, 0x3c, 0x3c,
        0x2f, 0x54, 0x79, 0x70, 0x65, 0x2f, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2f, 0x50, 0x61,
        0x67, 0x65, 0x73, 0x20, 0x32, 0x20, 0x30, 0x20, 0x52, 0x3e, 0x3e, 0x0a, 0x65, 0x6e, 0x64, 0x6f,
        0x62, 0x6a, 0x0a, 0x32, 0x20, 0x30, 0x20, 0x6f, 0x62, 0x6a, 0x0a, 0x3c, 0x3c, 0x2f, 0x54, 0x79,
        0x70, 0x65, 0x2f, 0x50, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x4b, 0x69, 0x64, 0x73, 0x5b, 0x33, 0x20,
        0x30, 0x20, 0x52, 0x5d, 0x2f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x31, 0x3e, 0x3e, 0x0a, 0x65,
        0x6e, 0x64, 0x6f, 0x62, 0x6a, 0x0a, 0x33, 0x20, 0x30, 0x20, 0x6f, 0x62, 0x6a, 0x0a, 0x3c, 0x3c,
        0x2f, 0x54, 0x79, 0x70, 0x65, 0x2f, 0x50, 0x61, 0x67, 0x65, 0x2f, 0x50, 0x61, 0x72, 0x65, 0x6e,
        0x74, 0x20, 0x32, 0x20, 0x30, 0x20, 0x52, 0x2f, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x42, 0x6f, 0x78,
        0x5b, 0x30, 0x20, 0x30, 0x20, 0x36, 0x31, 0x32, 0x20, 0x37, 0x39, 0x32, 0x5d, 0x3e, 0x3e, 0x0a,
        0x65, 0x6e, 0x64, 0x6f, 0x62, 0x6a, 0x0a, 0x78, 0x72, 0x65, 0x66, 0x0a, 0x30, 0x20, 0x34, 0x0a,
        0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x20, 0x36, 0x35, 0x35, 0x33, 0x35,
        0x20, 0x66, 0x20, 0x0a, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x39, 0x20, 0x30,
        0x30, 0x30, 0x30, 0x30, 0x20, 0x6e, 0x20, 0x0a, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
        0x37, 0x34, 0x20, 0x30, 0x30, 0x30, 0x30, 0x30, 0x20, 0x6e, 0x20, 0x0a, 0x30, 0x30, 0x30, 0x30,
        0x30, 0x30, 0x30, 0x31, 0x32, 0x32, 0x20, 0x30, 0x30, 0x30, 0x30, 0x30, 0x20, 0x6e, 0x20, 0x0a,
        0x74, 0x72, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x0a, 0x3c, 0x3c, 0x2f, 0x53, 0x69, 0x7a, 0x65, 0x20,
        0x34, 0x2f, 0x52, 0x6f, 0x6f, 0x74, 0x20, 0x31, 0x20, 0x30, 0x20, 0x52, 0x3e, 0x3e, 0x0a, 0x73,
        0x74, 0x61, 0x72, 0x74, 0x78, 0x72, 0x65, 0x66, 0x0a, 0x32, 0x32, 0x39, 0x0a, 0x25, 0x25, 0x45,
        0x4f, 0x46
      ]);
      
      const loadingTask = pdfjsLib.getDocument({ data: testDocument });
      const pdf = await Promise.race([
        loadingTask.promise,
        new Promise((_, reject) => setTimeout(() => reject(new Error('Worker test timeout')), 3000))
      ]);
      
      // If we get here, the worker is working
      console.log('‚úÖ PDF.js worker configured successfully with:', workerSrc);
      isWorkerConfigured = true;
      return pdfjsLib;
      
    } catch (error) {
      console.warn(`‚ùå Worker source failed:`, workerSrc, error.message);
      continue;
    }
  }
  
  // If all worker sources failed, try without worker (synchronous fallback)
  console.warn('‚ö†Ô∏è All PDF.js worker sources failed, trying without worker...');
  try {
    pdfjsLib.GlobalWorkerOptions.workerSrc = null;
    console.log('üîÑ PDF.js configured to run without worker (synchronous mode)');
    isWorkerConfigured = true;
    return pdfjsLib;
  } catch (error) {
    console.error('‚ùå Failed to configure PDF.js even without worker:', error);
    throw new Error('PDF.js configuration failed completely');
  }
}

// Reset configuration (useful for testing)
export function resetWorkerConfig() {
  isWorkerConfigured = false;
  console.log('üîÑ PDF.js worker configuration reset');
}